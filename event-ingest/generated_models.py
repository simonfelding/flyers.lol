# generated by datamodel-codegen:
#   filename:  openapi.yml
#   timestamp: 2025-05-08T15:36:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, EmailStr, Field


class Geo(BaseModel):
    latitude: float = Field(..., example=34.0522)
    longitude: float = Field(..., example=-118.2437)


class OrganizerInfo(BaseModel):
    name: str = Field(
        ..., description='Name of the organizer.', example='Tech Enthusiasts Group'
    )
    contact_email: Optional[EmailStr] = Field(
        None,
        description='Contact email address for the organizer. Optional.',
        example='organizer@example.com',
    )
    website: Optional[AnyUrl] = Field(
        None,
        description='Website URL for the organizer. Optional.',
        example='https://techenthusiasts.example.com',
    )


class ActionLink(BaseModel):
    url: AnyUrl = Field(..., example='https://example.com/tickets')
    text: str = Field(..., example='Buy Tickets')
    type: Optional[str] = Field(
        None,
        description='Type of action (e.g., "purchase", "rsvp", "register", "info"). Optional.',
        example='purchase',
    )


class Type(Enum):
    IMAGE = 'image'
    VIDEO = 'video'


class Media(BaseModel):
    type: Type = Field(..., example='image')
    value: str = Field(
        ...,
        description='URL, CID, or Data URI.',
        example='https://example.com/event_image.jpg',
    )


class RelatedLinkItem(BaseModel):
    url: AnyUrl = Field(..., example='https://example.com/more-info')
    text: str = Field(..., example='More Information')
    type: Optional[str] = Field(
        None,
        description='Type of link (e.g., "website", "social", "video"). Optional.',
        example='website',
    )


class Error(BaseModel):
    code: int
    message: str


class Location(BaseModel):
    name: str = Field(
        ...,
        description='Name of the venue or a general location description.',
        example='Community Hall',
    )
    address: Optional[str] = Field(
        None,
        description='Full street address of the event location. Optional.',
        example='123 Main St, Anytown, USA',
    )
    geo: Optional[Geo] = None


class Event(BaseModel):
    version: str = Field(
        ...,
        description='Semantic version of the event data structure (e.g., "1.0.0").',
        example='1.0.0',
    )
    id: str = Field(
        ...,
        description='Unique identifier for the event (e.g., "evt_xxxxxxxx").',
        example='evt_123abc456',
    )
    title: str = Field(
        ...,
        description='The main title or name of the event.',
        example='Community Hackathon',
    )
    description: str = Field(
        ...,
        description='A detailed description of the event.',
        example='Join us for a day of coding and collaboration!',
    )
    start_time: datetime = Field(
        ...,
        description='The start date and time of the event in ISO 8601 format.',
        example='2024-10-26T09:00:00Z',
    )
    end_time: Optional[datetime] = Field(
        None,
        description='The end date and time of the event in ISO 8601 format. Optional.',
        example='2024-10-26T17:00:00Z',
    )
    location: Location
    organizer_info: OrganizerInfo
    action_link: Optional[ActionLink] = None
    signature: str = Field(
        ...,
        description='Cryptographic signature of the event data from the original creator.',
        example='0x123...',
    )
    media: Optional[Media] = None
    related_links: Optional[List[RelatedLinkItem]] = Field(
        None,
        description='An array of general-purpose links related to the event. Optional.',
    )
    vector_embedding: Optional[List[float]] = Field(
        None,
        description="Vector embedding of the event's content. Optional at creation.",
        example=[0.1, 0.2, 0.3],
    )
